require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const fs = require("fs");

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

const QUESTIONS = [
  "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
  "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?",
  "–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?",
  "–£–∫–∞–∂–∏ —Ä–æ—Å—Ç –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–≥—Ä—É–¥—å/—Ç–∞–ª–∏—è/–±–µ–¥—Ä–∞):",
  "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –æ–ø—ã—Ç —Å—ä—ë–º–æ–∫? –ï—Å–ª–∏ –¥–∞ ‚Äî —Å–∫–æ–ª—å–∫–æ?",
  "–ì–æ—Ç–æ–≤–∞ –ª–∏ —Ç—ã –∫ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–º –æ–±—Ä–∞–∑–∞–º? (–¥–∞/–Ω–µ—Ç)",
  "–û—Å—Ç–∞–≤—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ —Ç–≥ (@name):",
  "–ó–∞–≥—Ä—É–∑–∏ 3 —Å–≤–æ–∏—Ö —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–π –ø–æ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ üì∏"
];

const userStates = new Map();

function validateInput(step, text) {
  switch (step) {
    case 0: // –∏–º—è - –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —Ö–æ—Ç—è –±—ã 2 –±—É–∫–≤—ã
      if (/^[–∞-—è–ê-–Ø—ë–Åa-zA-Z\s]{2,}$/.test(text)) {return true}
      else {bot.sendMessage("–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –∏–º–µ–Ω–∏");return false};
    case 1: // –≤–æ–∑—Ä–∞—Å—Ç - —á–∏—Å–ª–æ –æ—Ç 14 –¥–æ 99 (–ø—Ä–∏–º–µ—Ä)
      const age = parseInt(text);
      if (isNaN(age) || age < 14 /*|| age > 99*/) {bot.sendMessage("–ñ–¥–µ–º –≤–∞—Å, –∫–æ–≥–¥–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç—Å—è 18"); return false;}
      else {return true};
    case 2: // –≥–æ—Ä–æ–¥ - –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø—É—Å—Ç–æ–µ
      if (text.trim().length > 0) {return true}
      else {bot.sendMessage("–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞"); return false};
    case 3: // —Ä–æ—Å—Ç –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ —Ñ–æ—Ä–º–∞—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: "170 90/60/90"
      if (/^\d{3}\s\d{2,3}\/\d{2,3}\/\d{2,3}$/.test(text)) {return true}
      else {bot.sendMessage("–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"); return false};
    case 4: // –æ–ø—ã—Ç —Å—ä—ë–º–æ–∫ - "–Ω–µ—Ç" –∏–ª–∏ —á–∏—Å–ª–æ
      if (text.toLowerCase() === "–Ω–µ—Ç" || text.toLowerCase() === "–¥–∞") {return true;}
      const exp = parseInt(text);
      if (!isNaN(exp) && exp >= 0) {
      return true;
}
return bot.sendMessage("–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤");
    case 5: // –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–º –æ–±—Ä–∞–∑–∞–º - "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç"
      if (/^(–¥–∞|–Ω–µ—Ç)$/i.test(text)) {return true}
      else {bot.sendMessage("–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞"); return false};                  
    case 6: // –∫–æ–Ω—Ç–∞–∫—Ç - –Ω–æ–º–µ—Ä –∏–ª–∏ @username (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
      if (/^(\+?\d{7,15}|@[\w\d_]{5,})$/.test(text.trim())) {return true}
      else {bot.sendMessage("–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞"); return false};
    default:
      return true;
  }
}

bot.on("message", async (msg) => {
  const chatId = msg.chat.id;

  if (msg.text === "/start") {
    userStates.set(chatId, { step: 0, answers: [], photos: [] });
    return bot.sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç W-Model Management. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –∞–Ω–∫–µ—Ç—É!\n\n" + QUESTIONS[0]);
  }

  const state = userStates.get(chatId);
  if (!state) return;

  if (msg.photo) {
    const photoId = msg.photo[msg.photo.length - 1].file_id;
    state.photos.push(photoId);

    if (state.photos.length >= 3) {
      return finishApplication(chatId);
    }

      if (state.photos.length === 1 ) {
        return bot.sendMessage(chatId, "–û—Ç–ø—Ä–∞–≤—å –≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ");
      } else {return bot.sendMessage(chatId, "–û—Ç–ø—Ä–∞–≤—å —Ç—Ä–µ—Ç—å–µ —Ñ–æ—Ç–æ");}
  }

  if (state.step < QUESTIONS.length - 1) {
    state.answers.push(msg.text);
    state.step++;
    bot.sendMessage(chatId, QUESTIONS[state.step]);
  } else {
    state.answers.push(msg.text);
    bot.sendMessage(chatId, "–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –µ—â–µ —Å–≤–æ–∏—Ö —Ñ–æ—Ç–æ üì∏");
  }
});

async function finishApplication(chatId) {
  const state = userStates.get(chatId);
  if (!state) return;

  const text = state.answers.map((ans, i) => `${ans}`).join("\n");

  await bot.sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ! –í–æ—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:\n\n" + text + "\n\n–û–∂–∏–¥–∞–π, —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è –∞–≥–µ–Ω—Ç.");

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É
  await bot.sendMessage(process.env.ADMIN_CHAT_ID, `–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞:\n\n${text}`, { parse_mode: "Markdown" });

  for (const photoId of state.photos) {
    await bot.sendPhoto(process.env.ADMIN_CHAT_ID, photoId);
  }

  userStates.delete(chatId);
}
