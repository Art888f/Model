require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

const QUESTIONS = [
  "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
  "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?",
  "–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?",
  "–£–∫–∞–∂–∏ —Ä–æ—Å—Ç –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–≥—Ä—É–¥—å/—Ç–∞–ª–∏—è/–±–µ–¥—Ä–∞), –Ω–∞–ø—Ä–∏–º–µ—Ä: 170 90/60/90",
  "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –æ–ø—ã—Ç —Å—ä—ë–º–æ–∫? (–¥–∞/–Ω–µ—Ç, –µ—Å–ª–∏ –¥–∞ ‚Äî —Å–∫–æ–ª—å–∫–æ)",
  "–ì–æ—Ç–æ–≤–∞ –ª–∏ —Ç—ã –∫ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–º –æ–±—Ä–∞–∑–∞–º? (–¥–∞/–Ω–µ—Ç/–≤–æ–∑—Ö–º–æ–∂–Ω–æ)",
  "–û—Å—Ç–∞–≤—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ Telegram: @username)",
  "–ó–∞–≥—Ä—É–∑–∏ 3 —Å–≤–æ–∏—Ö —Ñ–æ—Ç–æ (–æ—Ç–ø—Ä–∞–≤–ª—è–π –ø–æ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ üì∏)"
];

const userStates = new Map();

// üí° –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –æ—à–∏–±–∫–∏
function validateInput(step, text, chatId) {
  switch (step) {
    case 0:
      if (/^[–∞-—è–ê-–Ø—ë–Åa-zA-Z\s]{2,}$/.test(text)) return true;
      bot.sendMessage(chatId, "‚ö†Ô∏è –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 2 –±—É–∫–≤—ã.");
      return false;

    case 1:
  const age = parseInt(text);
  if (isNaN(age)) {
    bot.sendMessage(chatId, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
    return false;
  }
  if (age < 18) {
    bot.sendMessage(chatId, "‚ö†Ô∏è –ñ–¥–µ–º —Ç–µ–±—è, –∫–æ–≥–¥–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç—Å—è 18 üòî");
    return false;
  }
  return true;

    case 2:
      if (text.trim().length > 0) return true;
      bot.sendMessage(chatId, "‚ö†Ô∏è –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ—Ä–æ–¥.");
      return false;

    case 3:
      if (/^\d{3}\s\d{2,3}\/\d{2,3}\/\d{2,3}$/.test(text)) return true;
      bot.sendMessage(chatId, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: 170 90/60/90");
      return false;

    case 4:
  const lower = text.toLowerCase().trim();
  if (lower.includes("–¥–∞") || lower.includes("–Ω–µ—Ç")) return true;
  const digits = lower.match(/\d+/);
  if (digits && parseInt(digits[0]) >= 0) return true;
  bot.sendMessage(chatId, "‚ö†Ô∏è –£–∫–∞–∂–∏ '–¥–∞', '–Ω–µ—Ç' –∏–ª–∏ —á–∏—Å–ª–æ.");
  return false;


    case 5:
      if (/^(–¥–∞|–Ω–µ—Ç|–≤–æ–∑–º–æ–∂–Ω–æ)$/i.test(text)) return true;
      bot.sendMessage(chatId, "‚ö†Ô∏è –û—Ç–≤–µ—Ç—å '–¥–∞', '–Ω–µ—Ç' –∏–ª–∏ '–≤–æ–∑–º–æ–∂–Ω–æ'.");
      return false;

    case 6:
      if (/^(\+?\d{7,15}|@[\w\d_]{5,})$/.test(text.trim())) return true;
      bot.sendMessage(chatId, "‚ö†Ô∏è –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ Telegram: @username.");
      return false;

    default:
      return true;
  }
}

// üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message", async (msg) => {
  const chatId = msg.chat.id;

  // üëâ /start
  if (msg.text === "/start") {
    userStates.set(chatId, { step: 0, answers: [], photos: [] });
    return bot.sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç W-Model Management. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –∞–Ω–∫–µ—Ç—É üìù\n\n" + QUESTIONS[0]);
  }

  const state = userStates.get(chatId);
  if (!state) return;

  // üì∏ –§–æ—Ç–æ
  if (msg.photo) {
    const photoId = msg.photo[msg.photo.length - 1].file_id;
    state.photos.push(photoId);

    if (state.photos.length < 3) {
      const count = state.photos.length + 1;
      return bot.sendMessage(chatId, `–û—Ç–ø—Ä–∞–≤—å ${count}-–µ —Ñ–æ—Ç–æ`);
    } else {
      return finishApplication(chatId);
    }
  }

  const currentStep = state.step;

  if (!validateInput(currentStep, msg.text, chatId)) {
    return; // ‚ùå –û—à–∏–±–∫–∞ ‚Äî –Ω–µ –¥–≤–∏–≥–∞–µ–º—Å—è –≤–ø–µ—Ä—ë–¥, –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è —Ç–æ—Ç –∂–µ –≤–æ–ø—Ä–æ—Å
  }

  // ‚úÖ –û—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç
  state.answers.push(msg.text);
  state.step++;

  if (state.step < QUESTIONS.length - 1) {
    bot.sendMessage(chatId, QUESTIONS[state.step]);
  } else {
    bot.sendMessage(chatId, "–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –µ—â—ë 3 —Å–≤–æ–∏—Ö —Ñ–æ—Ç–æ üì∏");
  }
});

// ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã
async function finishApplication(chatId) {
  const state = userStates.get(chatId);
  if (!state) return;

  const summary = QUESTIONS.slice(0, 7)
    .map((q, i) => `*${q}*\n${state.answers[i]}`)
    .join("\n\n");

  await bot.sendMessage(chatId, "–°–ø–∞—Å–∏–±–æ! –í–æ—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:\n\n" + summary + "\n\n–û–∂–∏–¥–∞–π ‚Äî —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è –∞–≥–µ–Ω—Ç.\n\n–ï—Å–ª–∏ –≥–¥–µ-—Ç–æ –Ω–µ–ø—Ä–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–∏–ª–∞ –∞–Ω–∫–µ—Ç—É, —Ç–æ –Ω–∞–∂–º–∏ —Å—é–¥–∞—è: /start", {
    parse_mode: "Markdown"
  });

  // ‚¨ÜÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
  await bot.sendMessage(process.env.ADMIN_CHAT_ID, "üì• –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞:\n\n" + summary, { parse_mode: "Markdown" });

  for (const photoId of state.photos) {
    await bot.sendPhoto(process.env.ADMIN_CHAT_ID, photoId);
  }

  userStates.delete(chatId);
}
